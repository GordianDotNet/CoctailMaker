@page "/systemconfiguration"

<h1>Systemkonfiguration</h1>

@if (loadingException != null)
{
    <p><em>Loading failed: @loadingException.Message</em></p>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
}
else if (systemConfig == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="Save"><i class="fa fa-save" /></button>


    @*@if ((systemConfig?.Settings.Slots?.Count ?? 0) == 0)
    {
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">IngredientSlot</span></div>
            <span class="btn btn-outline-info" @onclick="(() => AddIngredientId(0))"><i class="fa fa-plus-circle" /></span>
        </div>
    }*@
    @for (int i = 0; i < (systemConfig?.Settings.Slots?.Count ?? 0); i++)
    {
        //Required for onchange binding
        var index = i;
        var slotConfig = systemConfig.Settings.Slots[index];
        <EditForm Model="slotConfig">
            <div class="input-group">
                <div class="input-group-prepend"><span class="input-group-text">Ingredient[@index]</span></div>
                <select class="form-control" @onchange="(e => SelectIngredient(index, e))" value="@slotConfig.IngredientId">
                    <option value="0">-- Select Ingredient --</option>
                    @if (ingredients != null)
                    {
                        @foreach (var incredient in ingredients)
                        {
                            <option value="@incredient.Id">@incredient.Name</option>
                        }
                    }
                </select>
                <div class="input-group-append">
                    @*<span class="btn btn-outline-info" @onclick="(() => AddIngredientId(index))"><i class="fa fa-plus-circle" /></span>*@
                    <span class="btn btn-outline-danger" @onclick="(() => RemoveIngredientId(index))"><i class="fa fa-trash" /></span>
                </div>
            </div>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><span class="oi oi-timer"></span></span>
                    <span class="input-group-text">QuantityPerTime</span>
                </div>
                <InputNumber class="form-control" @bind-Value="slotConfig.QuantityPerTime"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">@slotConfig.QuantityUnit</span>
                </div>
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><span class="oi oi-droplet"></span></span>
                    <span class="input-group-text">RemainingQuantity</span>
                </div>
                <InputNumber class="form-control" @bind-Value="slotConfig.RemainingQuantity"></InputNumber>
                <div class="input-group-append">
                    <span class="input-group-text">@slotConfig.QuantityUnit</span>
                </div>
            </div>
        </EditForm>
    }

    <div class="input-group mb-3">
        <div class="input-group-prepend"><span class="input-group-text">IngredientSlot</span></div>
        <span class="btn btn-outline-info" @onclick="(() => AddIngredientId(0))"><i class="fa fa-plus-circle" /></span>
    </div>
}

@code {

    [Inject]
    DatabaseService DatabaseService { get; set; }

    private List<Ingredient> ingredients;
    private SystemConfig systemConfig;
    private Exception loadingException;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            systemConfig = await DatabaseService.LoadSystemConfigOrCreateDefault();
            ingredients = await DatabaseService.LoadAll<Ingredient>();
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
    }

    private async Task Save()
    {
        await DatabaseService.Save(systemConfig);
        await Load();
    }

    private async Task DeleteDatabase()
    {
        loadingException = null;
        await DatabaseService.DeleteDatabase();
        await Load();
    }

    private void SelectIngredient(int index, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var incredientId))
        {
            var ingredient = ingredients.Where(x => x.Id == incredientId).FirstOrDefault();
            systemConfig.Settings.Slots[index].IngredientId = incredientId;
            systemConfig.Settings.Slots[index].QuantityUnit = ingredient.QuantityUnit;
            systemConfig.Settings.Slots[index].RemainingQuantity = ingredient.Quantity;
        }
    }

    private void RemoveIngredientId(int index)
    {
        systemConfig.Settings.Slots.RemoveAt(index);
    }

    private void AddIngredientId(int index)
    {
        index = Math.Min(systemConfig.Settings.Slots.Count, index + 1);
        systemConfig.Settings.Slots.Insert(index, new SlotConfig { });
    }
}
