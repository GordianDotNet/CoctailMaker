@page "/systemconfiguration"

@using CoctailMakerApp.Data.Services
@using CoctailMakerApp.Data
@inject SystemConfigService SystemConfigService

<h1>Systemkonfiguration</h1>

@if (loadingException != null)
{
    <p><em>Loading failed: @loadingException.Message</em></p>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
}
else if (systemConfig == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="Save">Save</button>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@nameof(systemConfig.StringMe)</td>
                <td><input @bind="systemConfig.StringMe" type="text"/></td>
            </tr>
            <tr>
                <td>@nameof(systemConfig.Value1)</td>
                <td><input @bind="systemConfig.Value1" /></td>
            </tr>
            <tr>
                <td>@nameof(systemConfig.Value2)</td>
                <td><input @bind="systemConfig.Value2" /></td>
            </tr>
            <tr>
                <td>@nameof(systemConfig.Value3)</td>
                <td><input @bind="systemConfig.Value3" /></td>
            </tr>
            <tr>
                <td>@nameof(systemConfig.Value4)</td>
                <td><input @bind="systemConfig.Value4" /></td>
            </tr>
        </tbody>

    </table>
}

@code {
    private SystemConfig systemConfig;
    private Exception loadingException;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            systemConfig = await SystemConfigService.Load();
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
    }

    private async Task Save()
    {
        await SystemConfigService.Save(systemConfig);
        await Reload();
    }

    private async Task DeleteDatabase()
    {
        loadingException = null;
        await SystemConfigService.DeleteDatabase();
        await Reload();
    }

    private async Task Reload()
    {
        await Load();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
