@page "/systemconfiguration"

<h1>Systemkonfiguration</h1>

@if (loadingException != null)
{
    <p><em>Loading failed: @loadingException.Message</em></p>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
}
else if (systemConfig == null && incredients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="Save">Save</button>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
    <!-- EditForm is required to use InputNumber and InputDate -->
    <EditForm Model="systemConfig">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@nameof(SystemConfig.MaxIngredients)</td>
                    <td><InputNumber @bind-Value="systemConfig.MaxIngredients" /></td>
                </tr>
                @for (int i = 0; systemConfig.IngredientIds != null && i < systemConfig.MaxIngredients && i < systemConfig.IngredientIds.Length; i++)
                {
                    var index = i;
                    <tr>
                        <td>Ingredient[@index]</td>
                        <td>
                            <select class="form-control" @onchange="(e => SelectIncredient(index, e))" value="@systemConfig.IngredientIds[index]">
                                <option value="0">-- Select Ingredient --</option>
                                @foreach (var incredient in incredients)
                                {
                                    <option value="@incredient.Id">@incredient.Name</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
                <tr>
                    <td>@nameof(SystemConfig.StringValue)</td>
                    <td><input @bind="systemConfig.StringValue" type="text" /></td>
                </tr>
                <tr>
                    <td>@nameof(SystemConfig.StringValue)</td>
                    <td><input @bind="systemConfig.StringValue" type="text" /></td>
                </tr>
                <tr>
                    <td>@nameof(SystemConfig.IntValue)</td>
                    <td><InputNumber @bind-Value="systemConfig.IntValue" /></td>
                </tr>
                <tr>
                    <td>@nameof(SystemConfig.FloatValue)</td>
                    <td><InputNumber @bind-Value="systemConfig.FloatValue" /></td>
                </tr>
                <tr>
                    <td>@nameof(SystemConfig.DoubleValue)</td>
                    <td><InputNumber @bind-Value="systemConfig.DoubleValue" /></td>
                </tr>
                <tr>
                    <td>@nameof(SystemConfig.DateTimeValue)</td>
                    <td><InputDate @bind-Value="systemConfig.DateTimeValue" /></td>
                </tr>
            </tbody>

        </table>
    </EditForm>
}

@code {

    [Inject]
    SystemConfigService SystemConfigService { get; set; }
    [Inject]
    IngredientsService IngredientsService { get; set; }
    [Inject]
    IToastService ToastService { get; set; }

    private List<Ingredient> incredients;
    private SystemConfig systemConfig;
    private Exception loadingException;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            systemConfig = await SystemConfigService.Load();
            incredients = await IngredientsService.LoadAll();
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
    }

    private async Task Save()
    {
        await SystemConfigService.Save(systemConfig);
        ToastService.ShowSuccess($"[Saved] SystemConfig");
        await Load();
    }

    private async Task DeleteDatabase()
    {
        loadingException = null;
        await SystemConfigService.DeleteDatabase();
        ToastService.ShowWarning("[Delete] Database");
        await Load();
    }

    private void SelectIncredient(int index, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var incredientId))
            systemConfig.IngredientIds[index] = incredientId;
    }
}
