@page "/systemconfiguration"

<h1>Systemkonfiguration</h1>

@if (loadingException != null)
{
    <p><em>Loading failed: @loadingException.Message</em></p>
    <button class="btn btn-primary" @onclick="DeleteDatabase">Delete database</button>
}
else if (systemConfig == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="Save"><i class="fa fa-save" /></button>
    <!-- EditForm is required to use InputNumber and InputDate -->
    <EditForm Model="systemConfig">

        @if ((systemConfig?.Settings.IngredientIds?.Count ?? 0) == 0)
        {
            <div class="input-group mb-3">
                <div class="input-group-prepend"><span class="input-group-text">IngredientSlot</span></div>
                <span class="btn btn-outline-info" @onclick="(() => AddIncredientId(0))"><i class="fa fa-plus-circle" /></span>
            </div>
        }
        @for (int i = 0; i < (systemConfig?.Settings.IngredientIds?.Count ?? 0); i++)
        {
            //Required for onchange binding
            var index = i;
            <div class="input-group mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Ingredient[@index]</span></div>
                <select class="form-control" @onchange="(e => SelectIncredient(index, e))" value="@systemConfig.Settings.IngredientIds[index]">
                    <option value="0">-- Select Ingredient --</option>
                    @if (incredients != null)
                    {
                        @foreach (var incredient in incredients)
                        {
                            <option value="@incredient.Id">@incredient.Name</option>
                        }
                    }
                </select>
                <div class="input-group-append">
                    <span class="btn btn-outline-info" @onclick="(() => AddIncredientId(index))"><i class="fa fa-plus-circle" /></span>
                    <span class="btn btn-outline-danger" @onclick="(() => RemoveIncredientId(index))"><i class="fa fa-trash" /></span>
                </div>
            </div>
        }
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">@nameof(SystemSettings.StringValue)</span></div>
            <input class="form-control" @bind="systemConfig.Settings.StringValue" type="text" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">@nameof(SystemSettings.IntValue)</span></div>
            <InputNumber class="form-control" @bind-Value="systemConfig.Settings.IntValue" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">@nameof(SystemSettings.FloatValue)</span></div>
            <InputNumber class="form-control" @bind-Value="systemConfig.Settings.FloatValue" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">@nameof(SystemSettings.DoubleValue)</span></div>
            <InputNumber class="form-control" @bind-Value="systemConfig.Settings.DoubleValue" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">@nameof(SystemSettings.DateTimeValue)</span></div>
            <InputDate class="form-control" @bind-Value="systemConfig.Settings.DateTimeValue" />
        </div>
    </EditForm>    
}

@code {

    [Inject]
    DatabaseService DatabaseService { get; set; }
    [Inject]
    IToastService ToastService { get; set; }

    private List<Ingredient> incredients;
    private SystemConfig systemConfig;
    private Exception loadingException;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            systemConfig = await DatabaseService.LoadSystemConfigOrCreateDefault();
            incredients = await DatabaseService.LoadAll<Ingredient>();
        }
        catch (Exception ex)
        {
            loadingException = ex;
        }
    }

    private async Task Save()
    {
        await DatabaseService.Save(systemConfig);
        ToastService.ShowSuccess($"[Saved] SystemConfig");
        await Load();
    }

    private async Task DeleteDatabase()
    {
        loadingException = null;
        await DatabaseService.DeleteDatabase();
        ToastService.ShowWarning("[Delete] Database");
        await Load();
    }

    private void SelectIncredient(int index, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var incredientId))
            systemConfig.Settings.IngredientIds[index] = incredientId;
    }

    private void RemoveIncredientId(int index)
    {
        systemConfig.Settings.IngredientIds.RemoveAt(index);
    }

    private void AddIncredientId(int index)
    {
        index = Math.Min(systemConfig.Settings.IngredientIds.Count, index + 1);
        systemConfig.Settings.IngredientIds.Insert(index, 0);
    }
}
