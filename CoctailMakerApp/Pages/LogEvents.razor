@page "/logevents"

@using System.IO;

<h1>Ereignisse</h1>

@if (loadingException != null)
{
    <p><em>Loading failed: @loadingException.Message</em></p>
    <button class="btn btn-danger" @onclick="DeleteDatabase"><i class="fa fa-exclamation-triangle pull-left" /> Delete database</button>
}
else if (logEvents == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AddLogEvent"><i class="fa fa-plus-circle" /></button>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Type</th>
                <th>Code</th>
                <th>Message</th>
                <th>FuncName</th>
                <th>File</th>
                <th>Line</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var logEvent in logEvents)
            {
                <tr>
                    <td>@logEvent.Id</td>
                    <td>@logEvent.Created.ToString("dd.MM.yyyy HH\\:mm\\:ss")</td>
                    <td>
                        @switch (logEvent.Type)
                        {
                            case LogEventType.Debug:
                                <span class="btn btn-light" title="@logEvent.Type"><i class="fa fa-info-circle" /></span>
                                break;
                            case LogEventType.Info:
                                switch (logEvent.Code)
                                {
                                    case EventCode.DatabaseEntityAdded:
                                    case EventCode.DatabaseEntityUpdated:
                                        <span class="btn btn-success" title="@logEvent.Type"><i class="fa fa-check" /></span>
                                        break;
                                    case EventCode.DatabaseEntityDeleted:
                                        <span class="btn btn-success" title="@logEvent.Type"><i class="fa fa-check" /></span>
                                        break;
                                    default:
                                        <span class="btn btn-info" title="@logEvent.Type"><i class="fa fa-info" /></span>
                                        break;
                                }

                                break;
                            case LogEventType.Warning:
                                <span class="btn btn-warning" title="@logEvent.Type"><i class="fa fa-exclamation" /></span>
                                break;
                            case LogEventType.Exception:
                                <span class="btn btn-danger" title="@logEvent.Type"><i class="fa fa-exclamation-triangle" /></span>
                                break;
                            case LogEventType.Error:
                                <span class="btn btn-danger" title="@logEvent.Type"><i class="fa fa-exclamation-triangle" /></span>
                                break;
                        }
                    </td>
                    <td>@logEvent.Code</td>
                    <td>@logEvent.Message</td>
                    <td>@logEvent.Func</td>
                    <td>@Path.GetFileName(logEvent.File)</td>
                    <td>@logEvent.Line</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-danger" @onclick="DeleteDatabase"><i class="fa fa-exclamation-triangle pull-left" /> Delete database</button>
}

@code {
    [Inject]
    DatabaseService DatabaseService { get; set; }
    [Inject]
    IToastService ToastService { get; set; }

    private LogEvent[] logEvents;
    private Exception loadingException;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            logEvents = (await DatabaseService.LoadAll<LogEvent>()).OrderByDescending(x => x.Id).ToArray();
        }
        catch (Exception ex)
        {
            loadingException = ex;
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task AddLogEvent()
    {
        await DatabaseService.SaveLogEvent($"Hallo {DateTime.Now}", EventCode.UnknownEvent);
        await Load();
    }

    private async Task DeleteDatabase()
    {
        loadingException = null;
        await DatabaseService.DeleteDatabase();
        await Load();
    }
}
